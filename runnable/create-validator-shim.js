import path from 'path';
import fs from 'fs';

// Some of the `validator` functions are used in:
// * `sequelize\packages\core\src\dialects\abstract\data-types.ts`.
// * `sequelize\packages\core\src\geo-json.ts`.
//
const VALIDATOR_FUNCTIONS_USED_IN_SEQUELIZE_CODE = [
	// These are used in the latest version of `sequelize` source code as of Jul 15, 2023.
	'isFloat',
	'isInt',
	'isDate',
	'isUUID',
	'isIPRange',
	'isIP',
	'isMACAddress',
	'isNumeric',
	// These additional ones are used in the latest released `sequelize` npm package.
	'isDecimal',
	'isBoolean'
];

const VALIDATOR_LIB_DIRECTORY = './node_modules/validator/lib';

const funcs = [];

for (const item of fs.readdirSync(VALIDATOR_LIB_DIRECTORY)) {
	if (fs.statSync(path.join(VALIDATOR_LIB_DIRECTORY, item)).isFile()) {
		funcs.push(item.replace(/\.js$/, ''));
	}
}

let contents = `
// This file was automatically generated by a \`runnable/create-validator-shim.js\` script:
// \`npm run create-validator-shim\`
`.trim();

contents += '\n';
contents += '\n';

// `validator.js` library exposes two types of exports:
// * `validator/lib/isEmail`
// * `validator/es/lib/isEmail`
//
// The shim will import from the `/lib/` subfolder rather than from the `/es/lib/` one.
// The rationale is that most people will do the same thing which would avoid
// duplicating the same functions of `validator` in the application bundle
// because those imports would otherwise differ by an "ES or non-ES" factor.
//
for (const func of VALIDATOR_FUNCTIONS_USED_IN_SEQUELIZE_CODE) {
	contents += `import ${func} from 'validator/lib/${func}';\n`;
}

contents += '\n';

contents += 'const validator = {};\n';

contents += '\n';

contents += '// The following functions are used in `sequelize` code:\n';

for (const func of VALIDATOR_FUNCTIONS_USED_IN_SEQUELIZE_CODE) {
	contents += `validator.${func} = ${func};\n`;
}

contents += '\n';

contents += '// The following functions are not used in `sequelize` code\n// but are exposed to the users of `sequelize` package:\n';
for (const func of funcs) {
	if (!VALIDATOR_FUNCTIONS_USED_IN_SEQUELIZE_CODE.includes(func)) {
		contents += `validator.${func} = () => functionNotIncluded('${func}');\n`;
	}
}

contents += '\n';

contents += `
function functionNotIncluded(func) {
	throw new Error('\`' + func + '\` function from \`validator\` package is not included in a browser version of \`sequelize\`. To fix this, import the \`' + func + '\` function from \`validator/lib/' + func + '\` manually and then either (a) use it in a field\\'s \`validate\` or (b) set it on the \`Sequelize.Validator\` object.');
}
`.trim();

if (!fs.existsSync('./source/shims/validator')) {
	fs.mkdirSync('./source/shims/validator');
}

fs.writeFileSync('./source/shims/validator/index.js', contents, 'utf8');